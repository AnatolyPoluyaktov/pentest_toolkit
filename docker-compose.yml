version: '3.7'
services:
  db:
    image: postgres:12
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - pentest_network
  rabbitmq:
    image: rabbitmq:3.6.6
    ports:
      - "5672:5672"
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=mypass
    networks:
      - pentest_network

  backend:
    image: toolkit:latest
    container_name: backend
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./:/usr/src/app/
    ports:
      - "8000:8000"
    env_file:
      - ./.env
    depends_on:
      - db
      - rabbitmq
    networks:
      - pentest_network
  worker:
    image: toolkit:latest
    container_name: worker
    command: celery -A django_osint worker -l info
    #environment:
     # - BROKER_URL=amqp://admin:mypass@rabbitmq:5672//
    env_file:
      - ./.env
    volumes:
      - ./:/usr/src/app
      - github_repos:/usr/src/github
      - wordlist:/usr/src/wordlist
      - scan_results:/usr/src/scan_results
      - gf_patterns:/root/.gf
      - nuclei_templates:/root/nuclei-templates
      - tool_config:/root/.config
    depends_on:
      - db
      - rabbitmq
      - backend
    restart: on-failure
    networks:
      - pentest_network



  celery-beat:
    image: toolkit:latest
    entrypoint: ./beat-entrypoint.sh
    command:  celery -A core beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler
    env_file:
      - ./.env
    volumes:
      - ./:/usr/src/app
      - github_repos:/usr/src/github
      - wordlist:/usr/src/wordlist
      - scan_results:/usr/src/scan_results
      - gf_patterns:/root/.gf
      - nuclei_templates:/root/nuclei-templates
      - tool_config:/root/.config
    depends_on:
      - worker
    networks:
      - pentest_network

  tor:
      image: peterdavehello/tor-socks-proxy
      restart: always
      networks:
        - pentest_network
      depends_on:
        - backend

networks:
  pentest_network:
volumes:
  tool_config:
  postgres_data:
  gf_patterns:
  nuclei_templates:
  github_repos:
  wordlist:
  scan_results:
