import csv
import io
import os
import threading
from datetime import timedelta
from functools import reduce
from operator import and_, or_

import requests
from django import http
from django.conf import settings
from django.contrib import messages
from django.db.models import Count, Q
from django.shortcuts import get_object_or_404, render
from django.urls import reverse
from django.utils import timezone
from django.utils.safestring import mark_safe

import validators
from core.common_func import *
from core.scanEngine.forms import *
from core.scanEngine.models import *
from core.startScan.models import *
from core.targetApp.forms import *
from core.targetApp.models import *
from core.targetApp.forms.add_target import AddTargetForm
from core.targetApp.forms.add_project import AddProjectForm
from core.targetApp.forms.update_target import UpdateTargetForm
from core.targetApp.forms.update_project import UpdateProjectForm


def add_target(request):
    add_target_form = AddTargetForm(request.POST or None)
    if request.method == "POST":
        if "add-single-target" in request.POST and add_target_form.is_valid():
            Domain.objects.create(
                **add_target_form.cleaned_data, insert_date=timezone.now()
            )
            messages.add_message(
                request,
                messages.INFO,
                "Target domain "
                + add_target_form.cleaned_data["name"]
                + " added successfully",
            )
            if (
                "fetch_whois_checkbox" in request.POST
                and request.POST["fetch_whois_checkbox"] == "on"
            ):
                thread = threading.Thread(
                    target=get_whois,
                    args=[add_target_form.cleaned_data["name"], True, False],
                )
                thread.setDaemon(True)
                thread.start()
            return http.HttpResponseRedirect(reverse("list_target"))
        if "add-ip-target" in request.POST:
            domains = request.POST.getlist("resolved_ip_domains")
            description = (
                request.POST["targetDescription"]
                if "targetDescription" in request.POST
                else ""
            )
            ip_address_cidr = (
                request.POST["ip_address"] if "ip_address" in request.POST else ""
            )
            added_target_count = 0
            for domain in domains:
                if not Domain.objects.filter(
                    name=domain
                ).exists() and validators.domain(domain):
                    Domain.objects.create(
                        name=domain,
                        description=description,
                        ip_address_cidr=ip_address_cidr,
                        insert_date=timezone.now(),
                    )
                    added_target_count += 1
            if added_target_count:
                messages.add_message(
                    request,
                    messages.SUCCESS,
                    str(added_target_count) + " targets added successfully!",
                )
                return http.HttpResponseRedirect(reverse("list_target"))
            else:
                messages.add_message(
                    request,
                    messages.ERROR,
                    "Oops! Could not import any targets, either targets already exists or is not a valid target.",
                )
                return http.HttpResponseRedirect(reverse("add_target"))
        elif "add-multiple-targets" in request.POST:
            bulk_targets = [
                target.rstrip() for target in request.POST["addTargets"].split("\n")
            ]
            bulk_targets = [target for target in bulk_targets if target]
            description = (
                request.POST["targetDescription"]
                if "targetDescription" in request.POST
                else ""
            )

            target_count = 0
            for target in bulk_targets:
                if not Domain.objects.filter(
                    name=target
                ).exists() and validators.domain(target):
                    Domain.objects.create(
                        name=target.rstrip("\n"),
                        description=description,
                        insert_date=timezone.now(),
                    )
                    target_count += 1
            if target_count:
                messages.add_message(
                    request,
                    messages.SUCCESS,
                    str(target_count) + " targets added successfully!",
                )
                return http.HttpResponseRedirect(reverse("list_target"))
            else:
                messages.add_message(
                    request,
                    messages.ERROR,
                    "Oops! Could not import any targets, either targets already exists or is not a valid target.",
                )
                return http.HttpResponseRedirect(reverse("add_target"))
        elif "import-txt-target" in request.POST or "import-csv-target" in request.POST:
            if "txtFile" in request.FILES:
                txt_file = request.FILES["txtFile"]
                if txt_file.content_type == "text/plain":
                    target_count = 0
                    txt_content = txt_file.read().decode("UTF-8")
                    io_string = io.StringIO(txt_content)
                    for target in io_string:
                        target_domain = target.rstrip("\n").rstrip("\r")
                        if not Domain.objects.filter(
                            name=target_domain
                        ).exists() and validators.domain(target_domain):
                            Domain.objects.create(
                                name=target_domain, insert_date=timezone.now()
                            )
                            target_count += 1
                    if target_count:
                        messages.add_message(
                            request,
                            messages.SUCCESS,
                            str(target_count) + " targets added successfully!",
                        )
                    else:
                        messages.add_message(
                            request,
                            messages.ERROR,
                            "Error importing targets, either targets already exist or CSV file is not valid.",
                        )
                        return http.HttpResponseRedirect(reverse("add_target"))
                else:
                    messages.add_message(request, messages.ERROR, "Invalid File type!")
                    return http.HttpResponseRedirect(reverse("add_target"))
            elif "csvFile" in request.FILES:
                csv_file = request.FILES["csvFile"]
                if csv_file.content_type == "text/csv" or csv_file.name.split(".")[1]:
                    target_count = 0
                    csv_content = csv_file.read().decode("UTF-8")
                    io_string = io.StringIO(csv_content)
                    for column in csv.reader(io_string, delimiter=","):
                        target_domain = column[0]
                        description = None if len(column) == 1 else column[1]
                        if not Domain.objects.filter(
                            name=target_domain
                        ).exists() and validators.domain(target_domain):
                            Domain.objects.create(
                                name=target_domain,
                                description=description,
                                insert_date=timezone.now(),
                            )
                            target_count += 1
                    if target_count:
                        messages.add_message(
                            request,
                            messages.SUCCESS,
                            str(target_count) + " targets added successfully!",
                        )
                    else:
                        messages.add_message(
                            request,
                            messages.ERROR,
                            "Error importing targets, either targets already exist or CSV file is not valid.",
                        )
                        return http.HttpResponseRedirect(reverse("add_target"))
                else:
                    messages.add_message(request, messages.ERROR, "Invalid File type!")
                    return http.HttpResponseRedirect(reverse("add_target"))
            return http.HttpResponseRedirect(reverse("list_target"))
    context = {
        "add_target_li": "active",
        "target_data_active": "active",
        "form": add_target_form,
    }
    return render(request, "target/add.html", context)
