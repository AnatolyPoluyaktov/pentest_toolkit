import csv
import io
import os
import threading
from datetime import timedelta
from functools import reduce
from operator import and_, or_

import requests
from django import http
from django.conf import settings
from django.contrib import messages
from django.db.models import Count, Q
from django.shortcuts import get_object_or_404, render
from django.urls import reverse
from django.utils import timezone
from django.utils.safestring import mark_safe

import validators
from core.common_func import *
from core.scanEngine.forms import *
from core.scanEngine.models import *
from core.startScan.models import *
from core.targetApp.forms import *
from core.targetApp.models import *
from core.targetApp.forms.add_target import AddTargetForm
from core.targetApp.forms.add_project import AddProjectForm
from core.targetApp.forms.update_target import UpdateTargetForm
from core.targetApp.forms.update_project import UpdateProjectForm


def update_project(request, id):
    Project = get_object_or_404(Project, id=id)
    form = UpdateProjectForm()
    if request.method == "POST":
        print(request.POST.getlist("domains"))
        form = AddProjectForm(request.POST, instance=Project)
        if form.is_valid():
            Project_obj = Project.objects.filter(id=id)

            for domain in Project.get_domains():
                Project.domains.remove(domain)

            Project_obj.update(
                name=form.cleaned_data["name"],
                description=form.cleaned_data["description"],
            )
            for domain_id in request.POST.getlist("domains"):
                domain = Domain.objects.get(id=domain_id)
                Project.domains.add(domain)
            messages.add_message(
                request,
                messages.INFO,
                "Project {} modified!".format(Project.name),
            )
            return http.HttpResponseRedirect(reverse("list_Project"))
    else:
        domain_list = Project.get_domains().values_list("id", flat=True)
        domain_list = [str(id) for id in domain_list]
        form.set_value(Project.name, Project.description)
    context = {
        "list_Project_li": "active",
        "Project_data_active": "true",
        "Project": Project,
        "domain_list": mark_safe(domain_list),
        "form": form,
    }
    return render(request, "Project/update.html", context)
