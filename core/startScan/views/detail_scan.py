import json
import os
from datetime import datetime

import markdown
from django.contrib import messages
from django.db.models import Count
from django.http import HttpResponse, HttpResponseRedirect, JsonResponse
from django.shortcuts import get_object_or_404, render
from django.template.loader import get_template
from django.urls import reverse
from django.utils import timezone
from django_celery_beat.models import (ClockedSchedule, IntervalSchedule,
                                       PeriodicTask)

from core.scanEngine.models import EngineType
from core.startScan.models import (CVE, CWE, CountryISO, Email, Employee,
                                   EndPoint, IpAddress, ScanActivity,
                                   ScanHistory, Subdomain, Vulnerability,
                                   VulnerabilityTags)


def detail_scan(request, id=None):
    context = {}
    if id:
        context["scan_history_id"] = id
        context["subdomain_count"] = (
            Subdomain.objects.filter(scan_history__id=id)
            .values("name")
            .distinct()
            .count()
        )
        context["alive_count"] = (
            Subdomain.objects.filter(scan_history__id=id)
            .values("name")
            .distinct()
            .filter(http_status__exact=200)
            .count()
        )
        context["important_count"] = (
            Subdomain.objects.filter(scan_history__id=id)
            .values("name")
            .distinct()
            .filter(is_important=True)
            .count()
        )
        context["scan_activity"] = ScanActivity.objects.filter(scan_of__id=id).order_by(
            "time"
        )
        context["endpoint_count"] = (
            EndPoint.objects.filter(scan_history__id=id)
            .values("http_url")
            .distinct()
            .count()
        )
        context["endpoint_alive_count"] = (
            EndPoint.objects.filter(scan_history__id=id, http_status__exact=200)
            .values("http_url")
            .distinct()
            .count()
        )
        history = get_object_or_404(ScanHistory, id=id)
        context["history"] = history
        vulnerabilities = Vulnerability.objects.filter(scan_history__id=id)
        info_count = vulnerabilities.filter(severity=0).count()
        low_count = vulnerabilities.filter(severity=1).count()
        medium_count = vulnerabilities.filter(severity=2).count()
        high_count = vulnerabilities.filter(severity=3).count()
        critical_count = vulnerabilities.filter(severity=4).count()
        unknown_count = vulnerabilities.filter(severity=-1).count()
        context["vulnerability_list"] = (
            Vulnerability.objects.filter(scan_history__id=id)
            .order_by("-severity")
            .all()[:50]
        )
        context["total_vulnerability_count"] = (
            info_count
            + low_count
            + medium_count
            + high_count
            + critical_count
            + unknown_count
        )
        context["info_count"] = info_count
        context["low_count"] = low_count
        context["medium_count"] = medium_count
        context["high_count"] = high_count
        context["critical_count"] = critical_count
        context["unknown_count"] = unknown_count
        context["total_vul_ignore_info_count"] = (
            low_count + medium_count + high_count + critical_count
        )
        context["scan_history_active"] = "active"

        context["scan_engines"] = EngineType.objects.all()

        emails = Email.objects.filter(emails__in=ScanHistory.objects.filter(id=id))

        context["exposed_count"] = emails.exclude(password__isnull=True).count()

        context["email_count"] = emails.count()

        context["employees_count"] = Employee.objects.filter(
            employees__in=ScanHistory.objects.filter(id=id)
        ).count()

        domain_id = ScanHistory.objects.filter(id=id)

        context["most_recent_scans"] = ScanHistory.objects.filter(
            domain__id=domain_id[0].domain.id
        ).order_by("-start_scan_date")[:10]

        context["http_status_breakdown"] = (
            Subdomain.objects.filter(scan_history=id)
            .exclude(http_status=0)
            .values("http_status")
            .annotate(Count("http_status"))
        )

        context["most_common_cve"] = (
            CVE.objects.filter(
                cve_ids__in=Vulnerability.objects.filter(scan_history__id=id)
            )
            .annotate(nused=Count("cve_ids"))
            .order_by("-nused")
            .values("name", "nused")[:10]
        )
        context["most_common_cwe"] = (
            CWE.objects.filter(
                cwe_ids__in=Vulnerability.objects.filter(scan_history__id=id)
            )
            .annotate(nused=Count("cwe_ids"))
            .order_by("-nused")
            .values("name", "nused")[:10]
        )
        context["most_common_tags"] = (
            VulnerabilityTags.objects.filter(
                vuln_tags__in=Vulnerability.objects.filter(scan_history__id=id)
            )
            .annotate(nused=Count("vuln_tags"))
            .order_by("-nused")
            .values("name", "nused")[:7]
        )

        context["most_common_vulnerability"] = (
            Vulnerability.objects.exclude(severity=0)
            .filter(scan_history__id=id)
            .values("name", "severity")
            .annotate(count=Count("name"))
            .order_by("-count")[:10]
        )

        context["asset_countries"] = (
            CountryISO.objects.filter(
                ipaddress__in=IpAddress.objects.filter(
                    ip_addresses__in=Subdomain.objects.filter(scan_history__id=id)
                )
            )
            .annotate(count=Count("iso"))
            .order_by("-count")
        )

        if domain_id:
            domain_id = domain_id[0].domain.id
            scan_history = (
                ScanHistory.objects.filter(domain=domain_id)
                .filter(subdomain_discovery=True)
                .filter(id__lte=id)
                .filter(scan_status=2)
            )
            if scan_history.count() > 1:
                last_scan = scan_history.order_by("-start_scan_date")[1]
                context["last_scan"] = last_scan

    # badge count for gfs
    if history.used_gf_patterns:
        count_gf = {}
        for gf in history.used_gf_patterns.split(","):
            count_gf[gf] = EndPoint.objects.filter(
                scan_history__id=id, matched_gf_patterns__icontains=gf
            ).count()
            context["matched_gf_count"] = count_gf
    return render(request, "startScan/detail_scan.html", context)
