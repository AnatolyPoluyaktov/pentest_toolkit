import json
import os
from datetime import datetime

import markdown
from django.contrib import messages
from django.db.models import Count
from django.http import HttpResponse, HttpResponseRedirect, JsonResponse
from django.shortcuts import get_object_or_404, render
from django.template.loader import get_template
from django.urls import reverse
from django.utils import timezone
from django_celery_beat.models import (ClockedSchedule, IntervalSchedule,
                                       PeriodicTask)
from weasyprint import HTML

from core.celery import app
from core.common_func import *
from core.scanEngine.models import EngineType, VulnerabilityReportSetting
from core.startScan.models import *
from core.targetApp.models import Domain, project
from core.tasks import create_scan_activity, initiate_scan


def stop_scan(request, id):
    if request.method == "POST":
        scan_history = get_object_or_404(ScanHistory, celery_id=id)
        # stop the celery task
        app.control.revoke(id, terminate=True, signal="SIGKILL")
        scan_history.scan_status = 3
        scan_history.save()
        try:
            last_activity = ScanActivity.objects.filter(scan_of=scan_history).order_by(
                "-pk"
            )[0]
            last_activity.status = 0
            last_activity.time = timezone.now()
            last_activity.save()
        except Exception as e:
            print(e)
        create_scan_activity(scan_history, "Scan aborted", 0)
        messageData = {"status": "true"}
        messages.add_message(request, messages.INFO, "Scan successfully stopped!")
    else:
        messageData = {"status": "false"}
        messages.add_message(request, messages.INFO, "Oops! something went wrong!")
    return JsonResponse(messageData)
