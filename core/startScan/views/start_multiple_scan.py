import json
import os
from datetime import datetime

import markdown
from django.contrib import messages
from django.db.models import Count
from django.http import HttpResponse, HttpResponseRedirect, JsonResponse
from django.shortcuts import get_object_or_404, render
from django.template.loader import get_template
from django.urls import reverse
from django.utils import timezone
from django_celery_beat.models import (ClockedSchedule, IntervalSchedule,
                                       PeriodicTask)
from weasyprint import HTML

from core.celery import app
from core.common_func import *
from core.scanEngine.models import EngineType, VulnerabilityReportSetting
from core.startScan.models import *
from core.targetApp.models import Domain, project
from core.tasks import create_scan_activity, initiate_scan


def start_multiple_scan(request):
    # domain = get_object_or_404(Domain, id=host_id)
    if request.method == "POST":
        if request.POST.get("scan_mode", 0):
            # if scan mode is available, then start the scan
            # get engine type
            engine_type = request.POST["scan_mode"]
            list_of_domains = request.POST["list_of_domain_id"]
            for domain_id in list_of_domains.split(","):
                # start the celery task
                scan_history_id = create_scan_object(domain_id, engine_type)
                celery_task = initiate_scan.apply_async(
                    args=(domain_id, scan_history_id, 0, engine_type)
                )
                ScanHistory.objects.filter(id=scan_history_id).update(
                    celery_id=celery_task.id
                )
            messages.add_message(
                request, messages.INFO, "Scan Started for multiple targets"
            )
            return HttpResponseRedirect(reverse("scan_history"))
        else:
            # this else condition will have post request from the scan page
            # containing all the targets id
            list_of_domain_name = []
            list_of_domain_id = []
            for key, value in request.POST.items():
                if key != "list_target_table_length" and key != "csrfmiddlewaretoken":
                    domain = get_object_or_404(Domain, id=value)
                    list_of_domain_name.append(domain.name)
                    list_of_domain_id.append(value)
            domain_ids = ",".join(list_of_domain_id)
    engine = EngineType.objects
    custom_engine_count = EngineType.objects.filter(default_engine=False).count()
    context = {
        "scan_history_active": "active",
        "engines": engine,
        "domain_list": list_of_domain_name,
        "domain_ids": domain_ids,
        "custom_engine_count": custom_engine_count,
    }
    return render(request, "startScan/start_multiple_scan_ui.html", context)
