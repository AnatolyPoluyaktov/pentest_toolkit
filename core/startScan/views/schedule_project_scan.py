import json
import os
from datetime import datetime

import markdown
from django.contrib import messages
from django.db.models import Count
from django.http import HttpResponse, HttpResponseRedirect, JsonResponse
from django.shortcuts import get_object_or_404, render
from django.template.loader import get_template
from django.urls import reverse
from django.utils import timezone
from django_celery_beat.models import (ClockedSchedule, IntervalSchedule,
                                       PeriodicTask)
from weasyprint import HTML

from core.celery import app
from core.common_func import *
from core.scanEngine.models import EngineType, VulnerabilityReportSetting
from core.startScan.models import *
from core.targetApp.models import Domain, Project
from core.tasks import create_scan_activity, initiate_scan


def schedule_project_scan(request, id):
    project_obj = Project.objects.get(id=id)
    if request.method == "POST":
        # get engine type
        engine_type = int(request.POST["scan_mode"])
        engine_object = get_object_or_404(EngineType, id=engine_type)
        for domain in project_obj.get_domains():
            task_name = (
                engine_object.engine_name
                + " for "
                + domain.name
                + ":"
                + str(datetime.datetime.strftime(timezone.now(), "%Y_%m_%d_%H_%M_%S"))
            )
            if request.POST["scheduled_mode"] == "periodic":
                # periodic task
                frequency_value = int(request.POST["frequency"])
                frequency_type = request.POST["frequency_type"]
                if frequency_type == "minutes":
                    period = IntervalSchedule.MINUTES
                elif frequency_type == "hours":
                    period = IntervalSchedule.HOURS
                elif frequency_type == "days":
                    period = IntervalSchedule.DAYS
                elif frequency_type == "weeks":
                    period = IntervalSchedule.DAYS
                    frequency_value *= 7
                elif frequency_type == "months":
                    period = IntervalSchedule.DAYS
                    frequency_value *= 30

                schedule, created = IntervalSchedule.objects.get_or_create(
                    every=frequency_value,
                    period=period,
                )
                _kwargs = json.dumps(
                    {
                        "domain_id": domain.id,
                        "scan_history_id": 0,
                        "scan_type": 1,
                        "engine_type": engine_type,
                        "imported_subdomains": None,
                    }
                )
                PeriodicTask.objects.create(
                    interval=schedule,
                    name=task_name,
                    task="reNgine.tasks.initiate_scan",
                    kwargs=_kwargs,
                )
            elif request.POST["scheduled_mode"] == "clocked":
                # clocked task
                schedule_time = request.POST["scheduled_time"]
                clock, created = ClockedSchedule.objects.get_or_create(
                    clocked_time=schedule_time,
                )
                _kwargs = json.dumps(
                    {
                        "domain_id": domain.id,
                        "scan_history_id": 0,
                        "scan_type": 1,
                        "engine_type": engine_type,
                        "imported_subdomains": None,
                    }
                )
                PeriodicTask.objects.create(
                    clocked=clock,
                    one_off=True,
                    name=task_name,
                    task="reNgine.tasks.initiate_scan",
                    kwargs=_kwargs,
                )
        messages.add_message(
            request,
            messages.INFO,
            "Scan Started for {} domains in project {}".format(
                len(project_obj.get_domains()), project_obj.name
            ),
        )
        return HttpResponseRedirect(reverse("scheduled_scan_view"))
    engine = EngineType.objects
    custom_engine_count = EngineType.objects.filter(default_engine=False).count()
    context = {
        "scan_history_active": "active",
        "project": project_obj,
        "domain_list": project_obj.get_domains(),
        "engines": engine,
        "custom_engine_count": custom_engine_count,
    }
    return render(request, "project/schedule_scan_ui.html", context)
