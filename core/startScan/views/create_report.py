import json
import os
from datetime import datetime

import markdown
from django.contrib import messages
from django.db.models import Count
from django.http import HttpResponse, HttpResponseRedirect, JsonResponse
from django.shortcuts import get_object_or_404, render
from django.template.loader import get_template
from django.urls import reverse
from django.utils import timezone
from django_celery_beat.models import (ClockedSchedule, IntervalSchedule,
                                       PeriodicTask)
from weasyprint import HTML

from core.celery import app
from core.common_func import *
from core.scanEngine.models import EngineType, VulnerabilityReportSetting
from core.startScan.models import *
from core.targetApp.models import Domain, project
from core.tasks import create_scan_activity, initiate_scan


def create_report(request, id):
    primary_color = "#FFB74D"
    secondary_color = "#212121"

    # get report type
    report_type = request.GET["report_type"] if "report_type" in request.GET else "full"

    if report_type == "recon":
        show_recon = True
        show_vuln = False
        report_name = "Reconnaissance Report"
    elif report_type == "vulnerability":
        show_recon = False
        show_vuln = True
        report_name = "Vulnerability Report"
    else:
        # default
        show_recon = True
        show_vuln = True
        report_name = "Full Scan Report"

    scan_object = ScanHistory.objects.get(id=id)
    unique_vulnerabilities = (
        Vulnerability.objects.filter(scan_history=scan_object)
        .values("name", "severity")
        .annotate(count=Count("name"))
        .order_by("-severity", "-count")
    )
    all_vulnerabilities = Vulnerability.objects.filter(
        scan_history=scan_object
    ).order_by("-severity")
    subdomains = Subdomain.objects.filter(scan_history=scan_object).order_by(
        "-content_length"
    )
    subdomain_alive_count = (
        Subdomain.objects.filter(scan_history__id=id)
        .values("name")
        .distinct()
        .filter(http_status__exact=200)
        .count()
    )
    interesting_subdomains = get_interesting_subdomains(scan_history=id)
    ip_addresses = IpAddress.objects.filter(
        ip_addresses__in=Subdomain.objects.filter(scan_history__id=id)
    ).distinct()

    data = {
        "scan_object": scan_object,
        "unique_vulnerabilities": unique_vulnerabilities,
        "all_vulnerabilities": all_vulnerabilities,
        "subdomain_alive_count": subdomain_alive_count,
        "interesting_subdomains": interesting_subdomains,
        "subdomains": subdomains,
        "ip_addresses": ip_addresses,
        "show_recon": show_recon,
        "show_vuln": show_vuln,
        "report_name": report_name,
    }

    # get report related config
    if VulnerabilityReportSetting.objects.all().exists():
        report = VulnerabilityReportSetting.objects.all()[0]
        data["company_name"] = report.company_name
        data["company_address"] = report.company_address
        data["company_email"] = report.company_email
        data["company_website"] = report.company_website
        data["show_rengine_banner"] = report.show_rengine_banner
        data["show_footer"] = report.show_footer
        data["footer_text"] = report.footer_text
        data["show_executive_summary"] = report.show_executive_summary

        primary_color = report.primary_color
        secondary_color = report.secondary_color

        description = report.executive_summary_description

        # replace executive_summary_description with template syntax!
        description = description.replace(
            "{scan_date}", scan_object.start_scan_date.strftime("%d %B, %Y")
        )
        description = description.replace("{company_name}", report.company_name)
        description = description.replace("{target_name}", scan_object.domain.name)
        if scan_object.domain.description:
            description = description.replace(
                "{target_description}", scan_object.domain.description
            )
        description = description.replace("{subdomain_count}", str(subdomains.count()))
        description = description.replace(
            "{vulnerability_count}", str(all_vulnerabilities.count())
        )
        description = description.replace(
            "{critical_count}", str(all_vulnerabilities.filter(severity=4).count())
        )
        description = description.replace(
            "{high_count}", str(all_vulnerabilities.filter(severity=3).count())
        )
        description = description.replace(
            "{medium_count}", str(all_vulnerabilities.filter(severity=2).count())
        )
        description = description.replace(
            "{low_count}", str(all_vulnerabilities.filter(severity=1).count())
        )
        description = description.replace(
            "{info_count}", str(all_vulnerabilities.filter(severity=0).count())
        )
        description = description.replace(
            "{unknown_count}", str(all_vulnerabilities.filter(severity=-1).count())
        )

        # convert to html
        data["executive_summary_description"] = markdown.markdown(description)

    data["primary_color"] = primary_color
    data["secondary_color"] = secondary_color

    template = get_template("report/template.html")
    html = template.render(data)
    pdf = HTML(string=html).write_pdf()

    if "download" in request.GET:
        response = HttpResponse(pdf, content_type="application/octet-stream")
    else:
        response = HttpResponse(pdf, content_type="application/pdf")

    return response
