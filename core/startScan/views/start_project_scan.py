import json
import os
from datetime import datetime

import markdown
from django.contrib import messages
from django.db.models import Count
from django.http import HttpResponse, HttpResponseRedirect, JsonResponse
from django.shortcuts import get_object_or_404, render
from django.template.loader import get_template
from django.urls import reverse
from django.utils import timezone
from django_celery_beat.models import (ClockedSchedule, IntervalSchedule,
                                       PeriodicTask)
from weasyprint import HTML

from core.celery import app
from core.common_func import *
from core.scanEngine.models import EngineType, VulnerabilityReportSetting
from core.startScan.models import *
from core.targetApp.models import Domain, Project
from core.tasks import create_scan_activity, initiate_scan

from .start_scan_ui import create_scan_object


def start_project_scan(request, id):
    project = get_object_or_404(Project, id=id)
    if request.method == "POST":
        # get engine type
        engine_type = request.POST["scan_mode"]
        for domain in project.get_domains():
            scan_history_id = create_scan_object(domain.id, engine_type)
            # start the celery task
            celery_task = initiate_scan.apply_async(
                args=(domain.id, scan_history_id, 0, engine_type, None)
            )
            ScanHistory.objects.filter(id=scan_history_id).update(
                celery_id=celery_task.id
            )
        messages.add_message(
            request,
            messages.INFO,
            "Scan Started for {} domains in project {}".format(
                len(project.get_domains()), project.name
            ),
        )
        return HttpResponseRedirect(reverse("scan_history"))
    engine = EngineType.objects.order_by("id")
    custom_engine_count = EngineType.objects.filter(default_engine=False).count()
    domain_list = project.get_domains()
    context = {
        "project_data_active": "true",
        "list_project_li": "active",
        "project": project,
        "engines": engine,
        "domain_list": domain_list,
        "custom_engine_count": custom_engine_count,
    }
    return render(request, "project/start_scan.html", context)
