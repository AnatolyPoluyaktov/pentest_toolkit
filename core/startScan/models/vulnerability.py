from django.contrib.postgres.fields import ArrayField
from django.db import models


class Vulnerability(models.Model):
    id = models.AutoField(primary_key=True)
    scan_history = models.ForeignKey("ScanHistory", on_delete=models.CASCADE)
    subdomain = models.ForeignKey(
        "Subdomain", on_delete=models.CASCADE, null=True, blank=True
    )
    endpoint = models.ForeignKey(
        "EndPoint", on_delete=models.CASCADE, blank=True, null=True
    )
    target_domain = models.ForeignKey(
        "targetApp.Domain", on_delete=models.CASCADE, null=True, blank=True
    )
    template = models.CharField(max_length=100)
    template_url = models.CharField(max_length=2500, null=True, blank=True)
    template_id = models.CharField(max_length=200, null=True, blank=True)
    matcher_name = models.CharField(max_length=500, null=True, blank=True)
    name = models.CharField(max_length=2500)
    severity = models.IntegerField()
    description = models.CharField(max_length=20000, null=True, blank=True)

    extracted_results = ArrayField(
        models.CharField(max_length=5000), blank=True, null=True
    )

    tags = models.ManyToManyField(
        "VulnerabilityTags", related_name="vuln_tags", blank=True
    )
    references = models.ManyToManyField(
        "VulnerabilityReference", related_name="vuln_reference", blank=True
    )
    cve_ids = models.ManyToManyField("CVE", related_name="cve_ids", blank=True)
    cwe_ids = models.ManyToManyField("CWE", related_name="cwe_ids", blank=True)

    cvss_metrics = models.CharField(max_length=500, null=True, blank=True)
    cvss_score = models.FloatField(null=True, blank=True, default=None)
    curl_command = models.CharField(max_length=15000, null=True, blank=True)
    type = models.CharField(max_length=100, null=True, blank=True)
    http_url = models.CharField(max_length=10000, null=True)
    discovered_date = models.DateTimeField(null=True)
    open_status = models.BooleanField(null=True, blank=True, default=True)
    hackerone_report_id = models.CharField(max_length=50, null=True, blank=True)
    # used for subscans
    vuln_subscan_ids = models.ManyToManyField(
        "SubScan", related_name="vuln_subscan_ids", blank=True
    )

    def __str__(self):
        return self.name

    def get_severity(self):
        return self.severity
