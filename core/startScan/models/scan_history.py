from django.db import models
from django.utils import timezone


class ScanHistory(models.Model):
    id = models.AutoField(primary_key=True)
    start_scan_date = models.DateTimeField()
    scan_status = models.IntegerField()
    results_dir = models.CharField(max_length=100, blank=True)
    domain = models.ForeignKey("targetApp.Domain", on_delete=models.CASCADE)
    scan_type = models.ForeignKey("scanEngine.EngineType", on_delete=models.CASCADE)
    celery_id = models.CharField(max_length=100, blank=True)
    subdomain_discovery = models.BooleanField(null=True, default=False)
    waf_detection = models.BooleanField(null=True, default=False)
    dir_file_fuzz = models.BooleanField(null=True, default=False)
    port_scan = models.BooleanField(null=True, default=False)
    fetch_url = models.BooleanField(null=True, default=False)
    vulnerability_scan = models.BooleanField(null=True, default=False)
    osint = models.BooleanField(null=True, default=False)
    screenshot = models.BooleanField(null=True, default=True)
    stop_scan_date = models.DateTimeField(null=True, blank=True)
    used_gf_patterns = models.CharField(max_length=500, null=True, blank=True)
    error_message = models.CharField(max_length=300, blank=True, null=True)
    # osint is directly linked to scan history and not subdomains
    emails = models.ManyToManyField("Email", related_name="emails", blank=True)
    employees = models.ManyToManyField("Employee", related_name="employees", blank=True)
    dorks = models.ManyToManyField("Dork", related_name="dorks", blank=True)

    def __str__(self):
        # debug purpose remove scan type and id in prod
        return self.domain.name

    def get_subdomain_count(self):
        from .subdomain import Subdomain

        return Subdomain.objects.filter(scan_history__id=self.id).count()

    def get_subdomain_change_count(self):
        from .subdomain import Subdomain

        last_scan = (
            ScanHistory.objects.filter(id=self.id)
            .filter(scan_type__subdomain_discovery=True)
            .order_by("-start_scan_date")
        )

        scanned_host_q1 = (
            Subdomain.objects.filter(target_domain__id=self.domain.id)
            .exclude(scan_history__id=last_scan[0].id)
            .values("name")
        )

        scanned_host_q2 = Subdomain.objects.filter(
            scan_history__id=last_scan[0].id
        ).values("name")

        new_subdomains = scanned_host_q2.difference(scanned_host_q1).count()
        removed_subdomains = scanned_host_q1.difference(scanned_host_q2).count()

        return [new_subdomains, removed_subdomains]

    def get_endpoint_count(self):
        from .endpoint import EndPoint

        return EndPoint.objects.filter(scan_history__id=self.id).count()

    def get_vulnerability_count(self):
        from .vulnerability import Vulnerability

        return Vulnerability.objects.filter(scan_history__id=self.id).count()

    def get_unknown_vulnerability_count(self):
        from .vulnerability import Vulnerability

        return (
            Vulnerability.objects.filter(scan_history__id=self.id)
            .filter(severity=-1)
            .count()
        )

    def get_info_vulnerability_count(self):
        from .vulnerability import Vulnerability

        return (
            Vulnerability.objects.filter(scan_history__id=self.id)
            .filter(severity=0)
            .count()
        )

    def get_low_vulnerability_count(self):
        from .vulnerability import Vulnerability

        return (
            Vulnerability.objects.filter(scan_history__id=self.id)
            .filter(severity=1)
            .count()
        )

    def get_medium_vulnerability_count(self):
        from .vulnerability import Vulnerability

        return (
            Vulnerability.objects.filter(scan_history__id=self.id)
            .filter(severity=2)
            .count()
        )

    def get_high_vulnerability_count(self):
        from .vulnerability import Vulnerability

        return (
            Vulnerability.objects.filter(scan_history__id=self.id)
            .filter(severity=3)
            .count()
        )

    def get_critical_vulnerability_count(self):
        from .vulnerability import Vulnerability

        return (
            Vulnerability.objects.filter(scan_history__id=self.id)
            .filter(severity=4)
            .count()
        )

    def get_progress(self):
        """
        formulae to calculate
        count number of true things to do, for http crawler, it is always +1
        divided by total scan activity associated - 2 (Start and Stop)
        """
        number_of_steps = sum(
            [
                self.subdomain_discovery,
                self.dir_file_fuzz,
                self.port_scan,
                self.fetch_url,
                self.vulnerability_scan,
                self.osint,
                self.screenshot,
                True,
            ]
        )
        steps_done = len(self.scanactivity_set.all())
        if steps_done and number_of_steps:
            return round((number_of_steps / (steps_done)) * 100, 2)

    def get_completed_ago(self):
        if self.stop_scan_date:
            return self.get_time_ago(self.stop_scan_date)

    def get_total_scan_time_in_sec(self):
        if self.stop_scan_date:
            return (self.stop_scan_date - self.start_scan_date).seconds

    def get_elapsed_time(self):
        return self.get_time_ago(self.start_scan_date)

    def get_time_ago(self, time):
        duration = timezone.now() - time
        days, seconds = duration.days, duration.seconds
        hours = days * 24 + seconds // 3600
        minutes = (seconds % 3600) // 60
        seconds = seconds % 60
        if not hours and not minutes:
            return "{} seconds".format(seconds)
        elif not hours:
            return "{} minutes".format(minutes)
        elif not minutes:
            return "{} hours".format(hours)
        return "{} hours {} minutes".format(hours, minutes)
