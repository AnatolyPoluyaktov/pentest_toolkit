from django.apps import apps
from django.db import models


class Subdomain(models.Model):
    id = models.AutoField(primary_key=True)
    scan_history = models.ForeignKey(ScanHistory, on_delete=models.CASCADE)
    target_domain = models.ForeignKey(
        Domain, on_delete=models.CASCADE, null=True, blank=True
    )
    name = models.CharField(max_length=1000)
    is_imported_subdomain = models.BooleanField(default=False)
    is_important = models.BooleanField(default=False, null=True, blank=True)
    http_url = models.CharField(max_length=10000, null=True, blank=True)
    screenshot_path = models.CharField(max_length=1000, null=True, blank=True)
    http_header_path = models.CharField(max_length=1000, null=True, blank=True)
    discovered_date = models.DateTimeField(blank=True, null=True)
    cname = models.CharField(max_length=5000, blank=True, null=True)
    is_cdn = models.BooleanField(default=False, blank=True, null=True)
    http_status = models.IntegerField(default=0)
    content_type = models.CharField(max_length=100, null=True, blank=True)
    response_time = models.FloatField(null=True, blank=True)
    webserver = models.CharField(max_length=1000, blank=True, null=True)
    content_length = models.IntegerField(default=0, blank=True, null=True)
    page_title = models.CharField(max_length=1000, blank=True, null=True)
    technologies = models.ManyToManyField(
        "Technology", related_name="technologies", blank=True
    )
    ip_addresses = models.ManyToManyField(
        "IPAddress", related_name="ip_addresses", blank=True
    )
    directories = models.ManyToManyField(
        "DirectoryScan", related_name="directories", blank=True
    )
    waf = models.ManyToManyField("Waf", related_name="waf", blank=True)

    def __str__(self):
        return str(self.name)

    @property
    def get_endpoint_count(self):
        return (
            EndPoint.objects.filter(scan_history=self.scan_history)
            .filter(subdomain__name=self.name)
            .count()
        )

    @property
    def get_info_count(self):
        return (
            Vulnerability.objects.filter(scan_history=self.scan_history)
            .filter(subdomain__name=self.name)
            .filter(severity=0)
            .count()
        )

    @property
    def get_low_count(self):
        return (
            Vulnerability.objects.filter(scan_history=self.scan_history)
            .filter(subdomain__name=self.name)
            .filter(severity=1)
            .count()
        )

    @property
    def get_medium_count(self):
        return (
            Vulnerability.objects.filter(scan_history=self.scan_history)
            .filter(subdomain__name=self.name)
            .filter(severity=2)
            .count()
        )

    @property
    def get_high_count(self):
        return (
            Vulnerability.objects.filter(scan_history=self.scan_history)
            .filter(subdomain__name=self.name)
            .filter(severity=3)
            .count()
        )

    @property
    def get_critical_count(self):
        return (
            Vulnerability.objects.filter(scan_history=self.scan_history)
            .filter(subdomain__name=self.name)
            .filter(severity=4)
            .count()
        )

    @property
    def get_total_vulnerability_count(self):
        return (
            Vulnerability.objects.filter(scan_history=self.scan_history)
            .filter(subdomain__name=self.name)
            .count()
        )

    @property
    def get_vulnerabilities(self):
        return Vulnerability.objects.filter(scan_history=self.scan_history).filter(
            subdomain__name=self.name
        )

    @property
    def get_directories_count(self):
        return (
            DirectoryFile.objects.filter(
                directory_files__in=DirectoryScan.objects.filter(
                    directories__in=Subdomain.objects.filter(id=self.id)
                )
            )
            .distinct()
            .count()
        )

    @property
    def get_todos(self):
        TodoNote = apps.get_model("recon_note", "TodoNote")
        notes = TodoNote.objects.filter(scan_history__id=self.scan_history.id).filter(
            subdomain__id=self.id
        )
        return notes.values()

    @property
    def get_subscan_count(self):
        return SubScan.objects.filter(subdomain__id=self.id).distinct().count()
