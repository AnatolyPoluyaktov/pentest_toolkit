class SubScan(models.Model):
    id = models.AutoField(primary_key=True)
    start_scan_date = models.DateTimeField()
    status = models.IntegerField()
    celery_id = models.CharField(max_length=100, blank=True)
    scan_history = models.ForeignKey(ScanHistory, on_delete=models.CASCADE)
    subdomain = models.ForeignKey(Subdomain, on_delete=models.CASCADE)
    dir_file_fuzz = models.BooleanField(null=True, default=False)
    port_scan = models.BooleanField(null=True, default=False)
    fetch_url = models.BooleanField(null=True, default=False)
    vulnerability_scan = models.BooleanField(null=True, default=False)
    osint = models.BooleanField(null=True, default=False)
    stop_scan_date = models.DateTimeField(null=True, blank=True)
    error_message = models.CharField(max_length=300, blank=True, null=True)
    engine = models.ForeignKey(
        EngineType, on_delete=models.CASCADE, blank=True, null=True
    )

    def get_completed_ago(self):
        if self.stop_scan_date:
            return get_time_taken(timezone.now(), self.stop_scan_date)

    def get_total_time_taken(self):
        if self.stop_scan_date:
            return get_time_taken(self.stop_scan_date, self.start_scan_date)

    def get_elapsed_time(self):
        return get_time_taken(timezone.now(), self.start_scan_date)

    def get_task_name_str(self):
        if self.dir_file_fuzz:
            return "Directory and File fuzzing"
        elif self.port_scan:
            return "Port Scan"
        elif self.fetch_url:
            return "Endpoint Gathering"
        elif self.vulnerability_scan:
            return "Vulnerability Scan"
        elif self.osint:
            return "OSINT"
        else:
            return "Unknown"
