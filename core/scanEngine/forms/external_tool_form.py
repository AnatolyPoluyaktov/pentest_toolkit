from django import forms
from django_ace import AceWidget

from core.scanEngine.models import *
from core.validators import validate_short_name


class ExternalToolForm(forms.ModelForm):
    class Meta:
        model = InstalledExternalTool
        fields = "__all__"

    name = forms.CharField(
        required=True,
        widget=forms.TextInput(
            attrs={
                "class": "form-control",
                "id": "tool_name",
                "placeholder": "My Awesome Tool",
            }
        ),
    )

    github_url = forms.CharField(
        required=True,
        widget=forms.TextInput(
            attrs={
                "class": "form-control",
                "id": "github_url",
                "placeholder": "https://github.com/",
            }
        ),
    )

    license_url = forms.CharField(
        required=False,
        widget=forms.TextInput(
            attrs={
                "class": "form-control",
                "id": "license_url",
                "placeholder": "https://github.com/user/tool/blob/master/LICENSE.md",
            }
        ),
    )

    logo_url = forms.CharField(
        required=False,
        widget=forms.TextInput(
            attrs={
                "class": "form-control",
                "id": "logo_url",
                "placeholder": "http://example.com/logo.png",
            }
        ),
    )

    description = forms.CharField(
        required=True,
        widget=forms.Textarea(
            attrs={
                "class": "form-control",
                "id": "tool_description",
                "placeholder": "Explain what this tool is used for.",
                "rows": 2,
            }
        ),
    )

    install_command = forms.CharField(
        required=True,
        widget=forms.TextInput(
            attrs={
                "class": "form-control",
                "id": "install_command",
                "placeholder": "Tool Installation Command",
            }
        ),
    )

    update_command = forms.CharField(
        required=False,
        widget=forms.TextInput(
            attrs={
                "class": "form-control",
                "id": "update_command",
                "placeholder": "Tool Update Command",
            }
        ),
    )

    version_match_regex = forms.CharField(
        required=False,
        widget=forms.TextInput(
            attrs={
                "class": "form-control",
                "id": "version_match_regex",
                "value": "[vV]*(\d+\.)?(\d+\.)?(\*|\d+)",
            }
        ),
    )

    version_lookup_command = forms.CharField(
        required=False,
        widget=forms.TextInput(
            attrs={"class": "form-control", "id": "version_lookup_command"}
        ),
    )

    is_subdomain_gathering = forms.BooleanField(
        required=False,
        widget=forms.CheckboxInput(
            attrs={
                "id": "is_subdomain_gathering",
                "class": "switch",
            }
        ),
    )

    subdomain_gathering_command = forms.CharField(
        required=False,
        widget=forms.TextInput(
            attrs={
                "class": "form-control",
                "id": "subdomain_gathering_command",
                "placeholder": "Subdomain Gathering Command",
                "value": "tool_name -d {TARGET} -o {OUTPUT}",
            }
        ),
    )

    def set_value(self, key):
        self.initial["name"] = key.name
        self.initial["github_url"] = key.github_url
        self.initial["license_url"] = key.license_url
        self.initial["logo_url"] = key.logo_url
        self.initial["description"] = key.description
        self.initial["install_command"] = key.install_command
        self.initial["update_command"] = key.update_command
        self.initial["version_match_regex"] = key.version_match_regex
        self.initial["version_lookup_command"] = key.version_lookup_command
        self.initial["subdomain_gathering_command"] = key.subdomain_gathering_command
