import glob
import io
import json
import os
import re
import shutil
import subprocess

import requests
from django import http
from django.conf import settings
from django.contrib import messages
from django.core.files.storage import default_storage
from django.shortcuts import get_object_or_404, render
from django.urls import reverse

from core.common_func import *
from core.scanEngine.forms import (AddEngineForm, AddWordlistForm,
                                   ExternalToolForm, InterestingLookupForm,
                                   NotificationForm, ProxyForm, ReportForm,
                                   UpdateEngineForm)
from core.scanEngine.models import (EngineType, InstalledExternalTool,
                                    InterestingLookupModel, Notification,
                                    Proxy, VulnerabilityReportSetting,
                                    Wordlist)
from core.tasks import run_system_commands


def tool_specific_settings(request):
    context = {}
    # check for incoming form requests
    if request.method == "POST":

        print(request.FILES)
        if "gfFileUpload" in request.FILES:
            gf_file = request.FILES["gfFileUpload"]
            file_extension = gf_file.name.split(".")[len(gf_file.name.split(".")) - 1]
            if file_extension != "json":
                messages.add_message(
                    request,
                    messages.ERROR,
                    "Invalid GF Pattern, upload only *.json extension",
                )
            else:
                # remove special chars from filename, that could possibly do directory traversal or XSS
                filename = re.sub(r'[\\/*?:"<>|]', "", gf_file.name)
                file_path = "/root/.gf/" + filename
                file = open(file_path, "w")
                file.write(gf_file.read().decode("utf-8"))
                file.close()
                messages.add_message(
                    request,
                    messages.INFO,
                    "Pattern {} successfully uploaded".format(gf_file.name[:4]),
                )
            return http.HttpResponseRedirect(reverse("tool_settings"))

        elif "nucleiFileUpload" in request.FILES:
            nuclei_file = request.FILES["nucleiFileUpload"]
            file_extension = nuclei_file.name.split(".")[
                len(nuclei_file.name.split(".")) - 1
            ]
            if file_extension != "yaml":
                messages.add_message(
                    request,
                    messages.ERROR,
                    "Invalid Nuclei Pattern, upload only *.yaml extension",
                )
            else:
                filename = re.sub(r'[\\/*?:"<>|]', "", nuclei_file.name)
                file_path = "/root/nuclei-templates/" + filename
                file = open(file_path, "w")
                file.write(nuclei_file.read().decode("utf-8"))
                file.close()
                messages.add_message(
                    request,
                    messages.INFO,
                    "Nuclei Pattern {} successfully uploaded".format(
                        nuclei_file.name[:-5]
                    ),
                )
            return http.HttpResponseRedirect(reverse("tool_settings"))

        elif "nuclei_config_text_area" in request.POST:
            with open("/root/.config/nuclei/config.yaml", "w") as fhandle:
                fhandle.write(request.POST.get("nuclei_config_text_area"))
            messages.add_message(request, messages.INFO, "Nuclei config updated!")
            return http.HttpResponseRedirect(reverse("tool_settings"))

        elif "subfinder_config_text_area" in request.POST:
            with open("/root/.config/subfinder/config.yaml", "w") as fhandle:
                fhandle.write(request.POST.get("subfinder_config_text_area"))
            messages.add_message(request, messages.INFO, "Subfinder config updated!")
            return http.HttpResponseRedirect(reverse("tool_settings"))

        elif "naabu_config_text_area" in request.POST:
            with open("/root/.config/naabu/config.yaml", "w") as fhandle:
                fhandle.write(request.POST.get("naabu_config_text_area"))
            messages.add_message(request, messages.INFO, "Naabu config updated!")
            return http.HttpResponseRedirect(reverse("tool_settings"))

        elif "amass_config_text_area" in request.POST:
            with open("/root/.config/amass.ini", "w") as fhandle:
                fhandle.write(request.POST.get("amass_config_text_area"))
            messages.add_message(request, messages.INFO, "Amass config updated!")
            return http.HttpResponseRedirect(reverse("tool_settings"))

        elif "theharvester_config_text_area" in request.POST:
            with open("/usr/src/github/theHarvester/api-keys.yaml", "w") as fhandle:
                fhandle.write(request.POST.get("theharvester_config_text_area"))
            messages.add_message(request, messages.INFO, "theHarvester config updated!")
            return http.HttpResponseRedirect(reverse("tool_settings"))

    context["settings_nav_active"] = "active"
    context["tool_settings_li"] = "active"
    context["settings_ul_show"] = "show"
    gf_list = (subprocess.check_output(["gf", "-list"])).decode("utf-8")
    nuclei_custom_pattern = [f for f in glob.glob("/root/nuclei-templates/*.yaml")]
    context["nuclei_templates"] = nuclei_custom_pattern
    context["gf_patterns"] = sorted(gf_list.split("\n"))
    return render(request, "scanEngine/settings/tool.html", context)
