import glob
import io
import json
import os
import re
import shutil
import subprocess

import requests
from django import http
from django.conf import settings
from django.contrib import messages
from django.core.files.storage import default_storage
from django.shortcuts import get_object_or_404, render
from django.urls import reverse

from core.common_func import *
from core.scanEngine.forms import (AddEngineForm, AddWordlistForm,
                                   ExternalToolForm, InterestingLookupForm,
                                   NotificationForm, ProxyForm, ReportForm,
                                   UpdateEngineForm)
from core.scanEngine.models import (EngineType, InstalledExternalTool,
                                    InterestingLookupModel, Notification,
                                    Proxy, VulnerabilityReportSetting,
                                    Wordlist)
from core.tasks import run_system_commands


def add_tool(request):
    form = ExternalToolForm()
    if request.method == "POST":
        form = ExternalToolForm(request.POST)
        print(form.errors)
        if form.is_valid():
            # add tool
            install_command = form.data["install_command"]
            github_clone_path = None
            if "git clone" in install_command:
                project_name = install_command.split("/")[-1]
                install_command = (
                    install_command
                    + " /usr/src/github/"
                    + project_name
                    + " && pip install -r /usr/src/github/"
                    + project_name
                    + "/requirements.txt"
                )
                github_clone_path = "/usr/src/github/" + project_name
                # if github cloned we also need to install requirements, atleast found in the main dir
                install_command = (
                    "pip3 install -r /usr/src/github/"
                    + project_name
                    + "/requirements.txt"
                )

            os.system(install_command)
            run_system_commands.apply_async(args=(install_command,))
            saved_form = form.save()
            if github_clone_path:
                tool = InstalledExternalTool.objects.get(id=saved_form.pk)
                tool.github_clone_path = github_clone_path
                tool.save()

            messages.add_message(
                request, messages.INFO, "External Tool Successfully Added!"
            )
            return http.HttpResponseRedirect(reverse("tool_arsenal"))
    context = {"settings_nav_active": "active", "form": form}
    return render(request, "scanEngine/settings/add_tool.html", context)
