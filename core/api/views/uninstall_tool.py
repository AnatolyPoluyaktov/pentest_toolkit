import json
import logging
import os
import re
import subprocess

import requests
import validators
from bs4 import BeautifulSoup
from django.core import serializers
from django.db.models import CharField, Count, Q, Value
from django.shortcuts import get_object_or_404
from django.utils import timezone
from lxml import html
from packaging import version
from rest_framework import generics, status, viewsets
from rest_framework.decorators import action, api_view
from rest_framework.response import Response
from rest_framework.views import APIView
from selenium import webdriver
from selenium.webdriver.common.by import By
# selenium
from selenium.webdriver.firefox.options import Options as FirefoxOptions
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait

from core.celery import app
from core.common_func import *
from core.dashboard.models import *
from core.recon_note.models import *
from core.scanEngine.models import *
from core.startScan.models import *
from core.targetApp.models import *
from core.tasks import (create_scan_activity, initiate_subtask,
                        run_system_commands)
from core.utilities import is_safe_path


class UninstallTool(APIView):
    def get(self, request):
        req = self.request
        tool_id = req.query_params.get("tool_id")
        tool_name = req.query_params.get("name")

        if tool_id:
            tool = InstalledExternalTool.objects.get(id=tool_id)
        elif tool_name:
            tool = InstalledExternalTool.objects.get(name=tool_name)

        if tool.is_default:
            return Response(
                {"status": False, "message": "Default tools can not be uninstalled"}
            )

        # check install instructions, if it is installed using go, then remove from go bin path,
        # else try to remove from github clone path

        # getting tool name is tricky!

        if "go install" in tool.install_command:
            tool_name = tool.install_command.split("/")[-1].split("@")[0]
            uninstall_command = "rm /go/bin/" + tool_name
        elif "git clone" in tool.install_command:
            tool_name = (
                tool.install_command[:-1]
                if tool.install_command[-1] == "/"
                else tool.install_command
            )
            tool_name = tool_name.split("/")[-1]
            uninstall_command = "rm -rf " + tool.github_clone_path
        else:
            return Response({"status": False, "message": "Cannot uninstall tool!"})

        os.system(uninstall_command)
        run_system_commands.apply_async(args=(uninstall_command,))

        tool.delete()

        return Response({"status": True, "message": "Uninstall Tool Success"})
