import subprocess

import requests
import validators
from bs4 import BeautifulSoup
from django.core import serializers
from django.db.models import CharField, Count, Q, Value
from django.shortcuts import get_object_or_404
from django.utils import timezone
from lxml import html
from packaging import version
from rest_framework import generics, status, viewsets
from rest_framework.decorators import action, api_view
from rest_framework.response import Response
from rest_framework.views import APIView
from selenium import webdriver
from selenium.webdriver.common.by import By
# selenium
from selenium.webdriver.firefox.options import Options as FirefoxOptions
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait

from core.celery import app
from core.common_func import *
from core.dashboard.models import *
from core.recon_note.models import *
from core.scanEngine.models import *
from core.startScan.models import *
from core.targetApp.models import *
from core.tasks import (create_scan_activity, initiate_subtask,
                        run_system_commands)
from core.utilities import is_safe_path


class AddTarget(APIView):
    def post(self, request):
        req = self.request
        data = req.data

        target_name = data.get("domain_name")
        h1_team_handle = data.get("h1_team_handle")
        description = data.get("description")

        if not target_name:
            return Response({"status": False, "message": "domain_name missing!"})

        # validate if target_name is a valid domain_name
        if not validators.domain(target_name):
            return Response({"status": False, "message": "Invalid Domain or IP"})

        if Domain.objects.filter(name=target_name).exists():
            return Response(
                {
                    "status": False,
                    "message": "Target already exists!",
                    "domain_id": Domain.objects.get(name=target_name).id,
                }
            )

        domain = Domain()
        domain.name = target_name
        domain.insert_date = timezone.now()
        domain.h1_team_handle = h1_team_handle
        domain.description = description
        domain.save()

        return Response(
            {
                "status": True,
                "message": "Domain successfully added as target!",
                "domain_name": target_name,
                "domain_id": domain.id,
            }
        )
