import json
import logging
import re
import subprocess

import requests
import validators
from bs4 import BeautifulSoup
from django.core import serializers
from django.db.models import CharField, Count, Q, Value
from django.shortcuts import get_object_or_404
from django.utils import timezone
from lxml import html
from packaging import version
from rest_framework import generics, status, viewsets
from rest_framework.decorators import action, api_view
from rest_framework.response import Response
from rest_framework.views import APIView
from selenium import webdriver
from selenium.webdriver.common.by import By
# selenium
from selenium.webdriver.firefox.options import Options as FirefoxOptions
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait

from core.api.serializers.subdomain_change_serializer import \
    SubdomainChangesSerializer
from core.celery import app
from core.common_func import *
from core.dashboard.models import *
from core.recon_note.models import *
from core.scanEngine.models import *
from core.startScan.models import *
from core.targetApp.models import *
from core.tasks import (create_scan_activity, initiate_subtask,
                        run_system_commands)
from core.utilities import is_safe_path


class SubdomainChangesViewSet(viewsets.ModelViewSet):
    """
    This viewset will return the Subdomain changes
    To get the new subdomains, we will look for ScanHistory with
    subdomain_discovery = True and the status of the last scan has to be
    successful and calculate difference
    """

    queryset = Subdomain.objects.none()
    serializer_class = SubdomainChangesSerializer

    def get_queryset(self):
        req = self.request
        scan_id = req.query_params.get("scan_id")
        changes = req.query_params.get("changes")
        domain_id = ScanHistory.objects.filter(id=scan_id)[0].domain.id
        scan_history = (
            ScanHistory.objects.filter(domain=domain_id)
            .filter(subdomain_discovery=True)
            .filter(id__lte=scan_id)
            .exclude(Q(scan_status=-1) | Q(scan_status=1))
        )
        if scan_history.count() > 1:
            last_scan = scan_history.order_by("-start_scan_date")[1]
            scanned_host_q1 = Subdomain.objects.filter(scan_history__id=scan_id).values(
                "name"
            )
            scanned_host_q2 = Subdomain.objects.filter(
                scan_history__id=last_scan.id
            ).values("name")
            added_subdomain = scanned_host_q1.difference(scanned_host_q2)
            removed_subdomains = scanned_host_q2.difference(scanned_host_q1)
            if changes == "added":
                return (
                    Subdomain.objects.filter(scan_history=scan_id)
                    .filter(name__in=added_subdomain)
                    .annotate(change=Value("added", output_field=CharField()))
                )
            elif changes == "removed":
                return (
                    Subdomain.objects.filter(scan_history=last_scan)
                    .filter(name__in=removed_subdomains)
                    .annotate(change=Value("removed", output_field=CharField()))
                )
            else:
                added_subdomain = (
                    Subdomain.objects.filter(scan_history=scan_id)
                    .filter(name__in=added_subdomain)
                    .annotate(change=Value("added", output_field=CharField()))
                )
                removed_subdomains = (
                    Subdomain.objects.filter(scan_history=last_scan)
                    .filter(name__in=removed_subdomains)
                    .annotate(change=Value("removed", output_field=CharField()))
                )
                changes = added_subdomain.union(removed_subdomains)
                return changes
        return self.queryset

    def paginate_queryset(self, queryset, view=None):
        if "no_page" in self.request.query_params:
            return None
        return self.paginator.paginate_queryset(queryset, self.request, view=self)
