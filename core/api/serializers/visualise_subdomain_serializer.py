from django.db.models import F, JSONField, Value
from rest_framework import serializers

from core.common_func import *
from core.dashboard.models import *
from core.recon_note.models import *
from core.scanEngine.models import *
from core.startScan.models import *
from core.targetApp.models import Domain, Project


class VisualiseSubdomainSerializer(serializers.ModelSerializer):

    children = serializers.SerializerMethodField("get_children")
    description = serializers.SerializerMethodField("get_description")
    title = serializers.SerializerMethodField("get_title")

    class Meta:
        model = Subdomain
        fields = [
            "description",
            "children",
            "http_status",
            "title",
        ]

    def get_description(self, subdomain):
        return subdomain.name

    def get_title(self, subdomain):
        if (
            get_interesting_subdomains(subdomain.scan_history.id)
            .filter(name=subdomain.name)
            .exists()
        ):
            return "Interesting"

    def get_children(self, subdomain_name):
        subdomain = Subdomain.objects.filter(
            scan_history=self.context.get("scan_history")
        ).filter(name=subdomain_name)

        ips = IpAddress.objects.filter(ip_addresses__in=subdomain)
        ip_serializer = VisualiseIpSerializer(ips, many=True)

        # endpoint = EndPoint.objects.filter(
        #     scan_history=self.context.get('scan_history')).filter(
        #     subdomain__name=subdomain_name)
        # endpoint_serializer = VisualiseEndpointSerializer(endpoint, many=True)

        technologies = Technology.objects.filter(technologies__in=subdomain)
        tech_serializer = VisualiseTechnologySerializer(technologies, many=True)

        vulnerability = Vulnerability.objects.filter(
            scan_history=self.context.get("scan_history")
        ).filter(subdomain=subdomain_name)

        return_data = []
        if ip_serializer.data:
            return_data.append({"description": "IPs", "children": ip_serializer.data})
        # if endpoint_serializer.data:
        #     return_data.append({
        #         'description': 'Endpoints',
        #         'children': endpoint_serializer.data
        #     })
        if tech_serializer.data:
            return_data.append(
                {"description": "Technologies", "children": tech_serializer.data}
            )

        if vulnerability:
            vulnerability_data = []
            critical = vulnerability.filter(severity=4)
            if critical:
                critical_serializer = VisualiseVulnerabilitySerializer(
                    critical, many=True
                )
                vulnerability_data.append(
                    {"description": "Critical", "children": critical_serializer.data}
                )
            high = vulnerability.filter(severity=3)
            if high:
                high_serializer = VisualiseVulnerabilitySerializer(high, many=True)
                vulnerability_data.append(
                    {"description": "High", "children": high_serializer.data}
                )
            medium = vulnerability.filter(severity=2)
            if medium:
                medium_serializer = VisualiseVulnerabilitySerializer(medium, many=True)
                vulnerability_data.append(
                    {"description": "Medium", "children": medium_serializer.data}
                )
            low = vulnerability.filter(severity=1)
            if low:
                low_serializer = VisualiseVulnerabilitySerializer(low, many=True)
                vulnerability_data.append(
                    {"description": "Low", "children": low_serializer.data}
                )
            info = vulnerability.filter(severity=0)
            if info:
                info_serializer = VisualiseVulnerabilitySerializer(info, many=True)
                vulnerability_data.append(
                    {"description": "Informational", "children": info_serializer.data}
                )
            uknown = vulnerability.filter(severity=-1)
            if uknown:
                uknown_serializer = VisualiseVulnerabilitySerializer(uknown, many=True)
                vulnerability_data.append(
                    {"description": "Unknown", "children": uknown_serializer.data}
                )

            if vulnerability_data:
                return_data.append(
                    {"description": "Vulnerabilities", "children": vulnerability_data}
                )

        if subdomain_name.screenshot_path:
            return_data.append(
                {
                    "description": "Screenshot",
                    "screenshot_path": subdomain_name.screenshot_path,
                }
            )
        return return_data
