from django.db.models import F, JSONField, Value
from rest_framework import serializers

from core.common_func import *
from core.dashboard.models import *
from core.recon_note.models import *
from core.scanEngine.models import *
from core.startScan.models import *
from core.targetApp.models import Domain, Project


class ScanHistorySerializer(serializers.ModelSerializer):

    subdomain_count = serializers.SerializerMethodField("get_subdomain_count")
    endpoint_count = serializers.SerializerMethodField("get_endpoint_count")
    vulnerability_count = serializers.SerializerMethodField("get_vulnerability_count")
    current_progress = serializers.SerializerMethodField("get_progress")
    completed_time = serializers.SerializerMethodField("get_total_scan_time_in_sec")
    elapsed_time = serializers.SerializerMethodField("get_elapsed_time")
    completed_ago = serializers.SerializerMethodField("get_completed_ago")
    projects = serializers.SerializerMethodField("get_projects")

    class Meta:
        model = ScanHistory
        fields = "__all__"
        depth = 1

    def get_subdomain_count(self, scan_history):
        if scan_history.get_subdomain_count:
            return scan_history.get_subdomain_count()

    def get_endpoint_count(self, scan_history):
        if scan_history.get_endpoint_count:
            return scan_history.get_endpoint_count()

    def get_vulnerability_count(self, scan_history):
        if scan_history.get_vulnerability_count:
            return scan_history.get_vulnerability_count()

    def get_progress(self, scan_history):
        return scan_history.get_progress()

    def get_total_scan_time_in_sec(self, scan_history):
        return scan_history.get_total_scan_time_in_sec()

    def get_elapsed_time(self, scan_history):
        return scan_history.get_elapsed_time()

    def get_completed_ago(self, scan_history):
        return scan_history.get_completed_ago()

    def get_projects(self, scan_history):
        return [org.name for org in scan_history.domain.get_project()]
