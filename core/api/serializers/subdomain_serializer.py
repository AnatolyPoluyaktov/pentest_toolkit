from django.db.models import F, JSONField, Value
from rest_framework import serializers

from core.common_func import *
from core.dashboard.models import *
from core.recon_note.models import *
from core.scanEngine.models import *
from core.startScan.models import *
from core.targetApp.models import Domain, Project


class SubdomainSerializer(serializers.ModelSerializer):

    vuln_count = serializers.SerializerMethodField("get_vuln_count")

    is_interesting = serializers.SerializerMethodField("get_is_interesting")

    endpoint_count = serializers.SerializerMethodField("get_endpoint_count")
    info_count = serializers.SerializerMethodField("get_info_count")
    low_count = serializers.SerializerMethodField("get_low_count")
    medium_count = serializers.SerializerMethodField("get_medium_count")
    high_count = serializers.SerializerMethodField("get_high_count")
    critical_count = serializers.SerializerMethodField("get_critical_count")
    todos_count = serializers.SerializerMethodField("get_todos_count")
    directories_count = serializers.SerializerMethodField("get_directories_count")
    subscan_count = serializers.SerializerMethodField("get_subscan_count")
    ip_addresses = IpSerializer(many=True)
    waf = WafSerializer(many=True)
    technologies = TechnologySerializer(many=True)
    directories = DirectoryScanSerializer(many=True)

    class Meta:
        model = Subdomain
        fields = "__all__"

    def get_is_interesting(self, subdomain):
        return (
            get_interesting_subdomains(subdomain.scan_history.id)
            .filter(name=subdomain.name)
            .exists()
        )

    def get_endpoint_count(self, subdomain):
        return subdomain.get_endpoint_count

    def get_info_count(self, subdomain):
        return subdomain.get_info_count

    def get_low_count(self, subdomain):
        return subdomain.get_low_count

    def get_medium_count(self, subdomain):
        return subdomain.get_medium_count

    def get_high_count(self, subdomain):
        return subdomain.get_high_count

    def get_critical_count(self, subdomain):
        return subdomain.get_critical_count

    def get_directories_count(self, subdomain):
        return subdomain.get_directories_count

    def get_subscan_count(self, subdomain):
        return subdomain.get_subscan_count

    def get_todos_count(self, subdomain):
        return len(subdomain.get_todos)

    def get_vuln_count(self, obj):
        try:
            return obj.vuln_count
        except:
            return None
