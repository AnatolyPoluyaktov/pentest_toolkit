from django.db.models import F, JSONField, Value
from rest_framework import serializers

from core.common_func import *
from core.dashboard.models import *
from core.recon_note.models import *
from core.scanEngine.models import *
from core.startScan.models import *
from core.targetApp.models import Domain, Project


class VisualiseDataSerializer(serializers.ModelSerializer):

    title = serializers.ReadOnlyField(default="Target")
    description = serializers.SerializerMethodField("get_description")
    children = serializers.SerializerMethodField("get_children")

    class Meta:
        model = ScanHistory
        fields = [
            "description",
            "title",
            "children",
        ]

    def get_description(self, scan_history):
        return scan_history.domain.name

    def get_children(self, history):
        scan_history = ScanHistory.objects.filter(id=history.id)

        subdomain = Subdomain.objects.filter(scan_history=history)
        subdomain_serializer = VisualiseSubdomainSerializer(
            subdomain, many=True, context={"scan_history": history}
        )

        email = Email.objects.filter(emails__in=scan_history)
        email_serializer = VisualiseEmailSerializer(email, many=True)

        dork = Dork.objects.filter(dorks__in=scan_history)
        dork_serializer = VisualiseDorkSerializer(dork, many=True)

        employee = Employee.objects.filter(employees__in=scan_history)
        employee_serializer = VisualiseEmployeeSerializer(employee, many=True)

        metainfo = MetaFinderDocument.objects.filter(scan_history__id=history.id)

        return_data = []

        if subdomain_serializer.data:
            return_data.append(
                {"description": "Subdomains", "children": subdomain_serializer.data}
            )

        if (
            email_serializer.data
            or employee_serializer.data
            or dork_serializer.data
            or metainfo
        ):
            osint_data = []
            if email_serializer.data:
                osint_data.append(
                    {"description": "Emails", "children": email_serializer.data}
                )
            if employee_serializer.data:
                osint_data.append(
                    {"description": "Employees", "children": employee_serializer.data}
                )
            if dork_serializer.data:
                osint_data.append(
                    {"description": "Dorks", "children": dork_serializer.data}
                )

            if metainfo:
                metainfo_data = []
                usernames = (
                    metainfo.annotate(description=F("author"))
                    .values("description")
                    .distinct()
                    .annotate(children=Value([], output_field=JSONField()))
                    .filter(author__isnull=False)
                )

                if usernames:
                    metainfo_data.append(
                        {"description": "Usernames", "children": usernames}
                    )

                software = (
                    metainfo.annotate(description=F("producer"))
                    .values("description")
                    .distinct()
                    .annotate(children=Value([], output_field=JSONField()))
                    .filter(producer__isnull=False)
                )

                if software:
                    metainfo_data.append(
                        {"description": "Software", "children": software}
                    )

                os = (
                    metainfo.annotate(description=F("os"))
                    .values("description")
                    .distinct()
                    .annotate(children=Value([], output_field=JSONField()))
                    .filter(os__isnull=False)
                )

                if os:
                    metainfo_data.append({"description": "OS", "children": os})

            if metainfo:
                osint_data.append(
                    {"description": "Metainfo", "children": metainfo_data}
                )

            return_data.append({"description": "OSINT", "children": osint_data})

        return return_data
